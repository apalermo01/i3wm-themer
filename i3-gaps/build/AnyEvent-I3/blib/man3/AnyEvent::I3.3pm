.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "AnyEvent::I3 3pm"
.TH AnyEvent::I3 3pm "2023-01-24" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
AnyEvent::I3 \- communicate with the i3 window manager
.SH "VERSION"
.IX Header "VERSION"
Version 0.18
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module connects to the i3 window manager using the \s-1UNIX\s0 socket based
\&\s-1IPC\s0 interface it provides (if enabled in the configuration file). You can
then subscribe to events or send messages and receive their replies.
.PP
.Vb 1
\&    use AnyEvent::I3 qw(:all);
\&
\&    my $i3 = i3();
\&
\&    $i3\->connect\->recv or die "Error connecting";
\&    say "Connected to i3";
\&
\&    my $workspaces = $i3\->message(TYPE_GET_WORKSPACES)\->recv;
\&    say "Currently, you use " . @{$workspaces} . " workspaces";
.Ve
.PP
\&...or, using the sugar methods:
.PP
.Vb 1
\&    use AnyEvent::I3;
\&
\&    my $workspaces = i3\->get_workspaces\->recv;
\&    say "Currently, you use " . @{$workspaces} . " workspaces";
.Ve
.PP
A somewhat more involved example which dumps the i3 layout tree whenever there
is a workspace event:
.PP
.Vb 3
\&    use Data::Dumper;
\&    use AnyEvent;
\&    use AnyEvent::I3;
\&
\&    my $i3 = i3();
\&
\&    $i3\->connect\->recv or die "Error connecting to i3";
\&
\&    $i3\->subscribe({
\&        workspace => sub {
\&            $i3\->get_tree\->cb(sub {
\&                my ($tree) = @_;
\&                say "tree: " . Dumper($tree);
\&            });
\&        }
\&    })\->recv\->{success} or die "Error subscribing to events";
\&
\&    AE::cv\->recv
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
.ie n .SS "$i3 = i3([ $path ]);"
.el .SS "\f(CW$i3\fP = i3([ \f(CW$path\fP ]);"
.IX Subsection "$i3 = i3([ $path ]);"
Creates a new \f(CW\*(C`AnyEvent::I3\*(C'\fR object and returns it.
.PP
\&\f(CW\*(C`path\*(C'\fR is an optional path of the \s-1UNIX\s0 socket to connect to. It is strongly
advised to \s-1NOT\s0 specify this unless you're absolutely sure you need it.
\&\f(CW\*(C`AnyEvent::I3\*(C'\fR will automatically figure it out by querying the running i3
instance on the current \s-1DISPLAY\s0 which is almost always what you want.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.ie n .SS "$i3 = AnyEvent::I3\->new([ $path ])"
.el .SS "\f(CW$i3\fP = AnyEvent::I3\->new([ \f(CW$path\fP ])"
.IX Subsection "$i3 = AnyEvent::I3->new([ $path ])"
Creates a new \f(CW\*(C`AnyEvent::I3\*(C'\fR object and returns it.
.PP
\&\f(CW\*(C`path\*(C'\fR is an optional path of the \s-1UNIX\s0 socket to connect to. It is strongly
advised to \s-1NOT\s0 specify this unless you're absolutely sure you need it.
\&\f(CW\*(C`AnyEvent::I3\*(C'\fR will automatically figure it out by querying the running i3
instance on the current \s-1DISPLAY\s0 which is almost always what you want.
.ie n .SS "$i3\->connect"
.el .SS "\f(CW$i3\fP\->connect"
.IX Subsection "$i3->connect"
Establishes the connection to i3. Returns an \f(CW\*(C`AnyEvent::CondVar\*(C'\fR which will
be triggered with a boolean (true if the connection was established) as soon as
the connection has been established.
.PP
.Vb 3
\&    if ($i3\->connect\->recv) {
\&        say "Connected to i3";
\&    }
.Ve
.ie n .SS "$i3\->subscribe(\e%callbacks)"
.el .SS "\f(CW$i3\fP\->subscribe(\e%callbacks)"
.IX Subsection "$i3->subscribe(%callbacks)"
Subscribes to the given event types. This function awaits a hashref with the
key being the name of the event and the value being a callback.
.PP
.Vb 3
\&    my %callbacks = (
\&        workspace => sub { say "Workspaces changed" }
\&    );
\&
\&    if ($i3\->subscribe(\e%callbacks)\->recv\->{success}) {
\&        say "Successfully subscribed";
\&    }
.Ve
.PP
The special callback with name \f(CW\*(C`_error\*(C'\fR is called when the connection to i3
is killed (because of a crash, exit or restart of i3 most likely). You can
use it to print an appropriate message and exit cleanly or to try to reconnect.
.PP
.Vb 7
\&    my %callbacks = (
\&        _error => sub {
\&            my ($msg) = @_;
\&            say "I am sorry. I am so sorry: $msg";
\&            exit 1;
\&        }
\&    );
\&
\&    $i3\->subscribe(\e%callbacks)\->recv;
.Ve
.ie n .SS "$i3\->message($type, $content)"
.el .SS "\f(CW$i3\fP\->message($type, \f(CW$content\fP)"
.IX Subsection "$i3->message($type, $content)"
Sends a message of the specified \f(CW\*(C`type\*(C'\fR to i3, possibly containing the data
structure \f(CW\*(C`content\*(C'\fR (or \f(CW\*(C`content\*(C'\fR, encoded as utf8, if \f(CW\*(C`content\*(C'\fR is a
scalar), if specified.
.PP
.Vb 4
\&    my $reply = $i3\->message(TYPE_RUN_COMMAND, "reload")\->recv;
\&    if ($reply\->{success}) {
\&        say "Configuration successfully reloaded";
\&    }
.Ve
.SH "SUGAR METHODS"
.IX Header "SUGAR METHODS"
These methods intend to make your scripts as beautiful as possible. All of
them automatically establish a connection to i3 blockingly (if it does not
already exist).
.SS "get_workspaces"
.IX Subsection "get_workspaces"
Gets the current workspaces from i3.
.PP
.Vb 2
\&    my $ws = i3\->get_workspaces\->recv;
\&    say Dumper($ws);
.Ve
.SS "get_outputs"
.IX Subsection "get_outputs"
Gets the current outputs from i3.
.PP
.Vb 2
\&    my $outs = i3\->get_outputs\->recv;
\&    say Dumper($outs);
.Ve
.SS "get_tree"
.IX Subsection "get_tree"
Gets the layout tree from i3 (>= v4.0).
.PP
.Vb 2
\&    my $tree = i3\->get_tree\->recv;
\&    say Dumper($tree);
.Ve
.SS "get_marks"
.IX Subsection "get_marks"
Gets all the window identifier marks from i3 (>= v4.1).
.PP
.Vb 2
\&    my $marks = i3\->get_marks\->recv;
\&    say Dumper($marks);
.Ve
.SS "get_bar_config"
.IX Subsection "get_bar_config"
Gets the bar configuration for the specific bar id from i3 (>= v4.1).
.PP
.Vb 2
\&    my $config = i3\->get_bar_config($id)\->recv;
\&    say Dumper($config);
.Ve
.SS "get_version"
.IX Subsection "get_version"
Gets the i3 version via \s-1IPC,\s0 with a fall-back that parses the output of i3
\&\-\-version (for i3 < v4.3).
.PP
.Vb 2
\&    my $version = i3\->get_version()\->recv;
\&    say "major: " . $version\->{major} . ", minor = " . $version\->{minor};
.Ve
.SS "get_config"
.IX Subsection "get_config"
Gets the raw last read config from i3. Requires i3 >= 4.14
.SS "send_tick"
.IX Subsection "send_tick"
Sends a tick event. Requires i3 >= 4.15
.SS "sync"
.IX Subsection "sync"
Sends an i3 sync event. Requires i3 >= 4.16
.SS "command($content)"
.IX Subsection "command($content)"
Makes i3 execute the given command
.PP
.Vb 2
\&    my $reply = i3\->command("reload")\->recv;
\&    die "command failed" unless $reply\->{success};
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Stapelberg, \f(CW\*(C`<michael at i3wm.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-anyevent\-i3 at
rt.cpan.org\*(C'\fR, or through the web interface at
<https://rt.cpan.org/NoAuth/ReportBug.html?Queue=AnyEvent\-I3>.  I will be
notified, and then you'll automatically be notified of progress on your bug as
I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc AnyEvent::I3
.Ve
.PP
You can also look for information at:
.IP "\(bu" 2
\&\s-1RT: CPAN\s0's request tracker
.Sp
<https://rt.cpan.org/NoAuth/Bugs.html?Dist=AnyEvent\-I3>
.IP "\(bu" 2
The i3 window manager website
.Sp
<https://i3wm.org>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2010\-2012 Michael Stapelberg.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See https://dev.perl.org/licenses/ for more information.
